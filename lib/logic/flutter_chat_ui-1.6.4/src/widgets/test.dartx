class _InputState extends State<Input> {
late final _inputFocusNode = FocusNode(
onKeyEvent: (node, event) {
if (event.physicalKey == PhysicalKeyboardKey.enter &&
!HardwareKeyboard.instance.physicalKeysPressed.any(
(el) => <PhysicalKeyboardKey>{
PhysicalKeyboardKey.shiftLeft,
PhysicalKeyboardKey.shiftRight,
}.contains(el),
)) {
if (event is KeyDownEvent) {
_handleSendPressed();
}
return KeyEventResult.handled;
} else {
return KeyEventResult.ignored;
}
},
);

bool _sendButtonVisible = false;
late TextEditingController _textController;

SmartReplySuggestionResult? _suggestions;
final SmartReply _smartReply = SmartReply();

@override
void initState() {
super.initState();
_textController =
widget.options.textEditingController ?? InputTextFieldController();
_textController.addListener(() {
setState(() {
_sendButtonVisible = _textController.text.trim().isNotEmpty;
});
});
_generateSmartReplies();
}

@override
void didUpdateWidget(covariant Input oldWidget) {
super.didUpdateWidget(oldWidget);
if (widget.items != oldWidget.items) {
_generateSmartReplies();
}
}

@override
void dispose() {
_smartReply.close();
super.dispose();
}

Future<void> _generateSmartReplies() async {
_smartReply.clearConversation();

List<types.Message> reversedItems = widget.items.reversed.toList();

for (types.Message message in reversedItems) {
if (message is types.TextMessage) {
final user = message.author;
final timestamp = message.createdAt;

// Log the user role
dev.log('User role: ${user.role}');

if (user.role == Role.user) {
_smartReply.addMessageToConversationFromLocalUser(
message.text, timestamp!);
} else {
_smartReply.addMessageToConversationFromRemoteUser(
message.text, timestamp!, user.id);
}

// Log the message text and author information using dev.log
dev.log('${user.role.toString()}: ${message.text}');
}
}

final result = await _smartReply.suggestReplies();
setState(() {
_suggestions = result;
});
}

@override
Widget build(BuildContext context) => GestureDetector(
onTap: () => _inputFocusNode.requestFocus(),
child: _inputBuilder(),
);

void _handleSendButtonVisibilityModeChange() {
_textController.removeListener(_handleTextControllerChange);
if (widget.options.sendButtonVisibilityMode ==
SendButtonVisibilityMode.hidden) {
_sendButtonVisible = false;
} else if (widget.options.sendButtonVisibilityMode ==
SendButtonVisibilityMode.editing) {
_sendButtonVisible = _textController.text.trim() != '';
_textController.addListener(_handleTextControllerChange);
} else {
_sendButtonVisible = true;
}
}

void _handleSendPressed() {
final trimmedText = _textController.text.trim();
if (trimmedText != '') {
final partialText = types.PartialText(text: trimmedText);
widget.onSendPressed(partialText);

if (widget.options.inputClearMode == InputClearMode.always) {
_textController.clear();
}
}
}

void _handleTextControllerChange() {
setState(() {
_sendButtonVisible = _textController.text.trim() != '';
});
}

Map<String, List<TextMessage>> groupMessagesByUser() {
Map<String, List<TextMessage>> groupedMessages = {};

for (var item in widget.items) {
if (item is TextMessage) {
String userId = item.author.id;

if (!groupedMessages.containsKey(userId)) {
groupedMessages[userId] = [];
}
groupedMessages[userId]!.add(item);
}
}

return groupedMessages;
}

void printFirstNMessagesPerUser(int n) {
Map<String, List<TextMessage>> groupedMessages = groupMessagesByUser();

for (String userId in groupedMessages.keys) {
List<TextMessage> messages = groupedMessages[userId]!;
int messagesToPrint = n <= messages.length ? n : messages.length;

print('Benutzer-ID: $userId');
for (int i = 0; i < messagesToPrint; i++) {
TextMessage message = messages[i];
print('Nachricht ${i + 1}: ${message.text}');
}
}
}

Widget _buildChipList() {
List<String> chipTexts =
_suggestions?.suggestions.map<String>((s) => s).toList() ?? [];

return Container(
height: 50,
child: ListView.builder(
itemCount: chipTexts.length,
scrollDirection: Axis.horizontal,
itemBuilder: (BuildContext context, int index) {
return Padding(
padding: const EdgeInsets.symmetric(horizontal: 4.0),
child: Chip(
label: Text(chipTexts[index]),
onDeleted: () {
_textController.text = chipTexts[index];
},
),
);
},
),
);
}

Widget _inputBuilder() {
final query = MediaQuery.of(context);
final buttonPadding = InheritedChatTheme.of(context)
.theme
.inputPadding
.copyWith(left: 16, right: 16);
final safeAreaInsets = kIsWeb
? EdgeInsets.zero
: EdgeInsets.fromLTRB(
query.padding.left,
0,
query.padding.right,
query.viewInsets.bottom + query.padding.bottom,
);
final textPadding = const EdgeInsets.fromLTRB(0, 15, 10, 15)
.copyWith(left: 0, right: 0)
.add(
const EdgeInsets.fromLTRB(
// widget.onAttachmentPressed != null ? 0 : 10,
10,
0,
// _sendButtonVisible ? 0 : 10,
6,
0,
),
);

return SafeArea(
child: Column(
children: [
_buildChipList(),
Padding(
padding: // left 8 right 8 bottom 8
const EdgeInsets.fromLTRB(8, 0, 8, 8),
child: Focus(
autofocus: true,
child: Material(
// borderRadius: InheritedChatTheme.of(context).theme.inputBorderRadius,
// color: Theme.of(context).scaffoldBackgroundColor,
color: Colors.transparent,

child: Row(
children: [
Expanded(
child: Row(
children: [
//red container

Expanded(
child: Container(
// height: 50,
// round corners
decoration: BoxDecoration(
borderRadius: BorderRadius.circular(28),
color:
Theme.of(context).scaffoldBackgroundColor,
// color: Colors.red
),

child: Row(
//alling bottom
crossAxisAlignment: CrossAxisAlignment.end,
mainAxisAlignment: MainAxisAlignment.start,
children: [
if (widget.onAttachmentPressed != null)
AttachmentButton(
isLoading:
widget.isAttachmentUploading ?? false,
onPressed: widget.onAttachmentPressed,
padding: const EdgeInsets.fromLTRB(
18, 13.5, 5, 13.5),
),
Expanded(
child: Padding(
padding: // top 20 left 20 right 20 bottom 20
textPadding,
child: Column(
children: [
TextField(
autofocus: true,
//focus the texfield without the keyboard
focusNode: _inputFocusNode,
controller: _textController,
cursorColor:
InheritedChatTheme.of(context)
.theme
.inputTextCursorColor,
decoration:
InheritedChatTheme.of(context)
.theme
.inputTextDecoration
.copyWith(
contentPadding:
const EdgeInsets.fromLTRB(
0, 0, 0, 0),
hintStyle: Theme.of(context)
.textTheme
.bodyLarge!
.copyWith(
color: Theme.of(context)
.textTheme
.bodyLarge!
.color!
.withOpacity(0.5),
fontSize: 15,
),
// hintText: InheritedL10n.of(context)
// .l10n
// .inputPlaceholder,
hintText: 'Neue Nachricht',
),
keyboardType: TextInputType.multiline,
maxLines: 5,
minLines: 1,
onChanged: widget.options.onTextChanged,
onTap: widget.options.onTextFieldTap,
style: Theme.of(context)
.textTheme
.bodyLarge,
textCapitalization:
TextCapitalization.sentences,
),
const SizedBox(
height: 6,
),
],
),
),
),

ElevatedButton(
onPressed: () {
print(widget.items.toString());

for (var item in widget.items) {
if (item is TextMessage) {
if (item.text == 'sdsd') {
print('Gefundener Wert: ${item.text}');
}
}
}

if (widget.items.isNotEmpty) {
TextMessage lastMessage =
widget.items.last as TextMessage;
print(
'Letzte Nachricht: ${lastMessage.text}');
} else {
print('Keine Nachrichten gefunden.');
}

int messagesToPrint = 3 <= widget.items.length
? 3
: widget.items.length;
for (int i = 0; i < messagesToPrint; i++) {
TextMessage message =
widget.items[i] as TextMessage;
print(
'Nachricht ${i + 1}: ${message.text}');
}
Map<String, List<TextMessage>>
groupedMessages = groupMessagesByUser();
printFirstNMessagesPerUser(3);

// Gruppieren der Nachrichten und Anzeigen der ersten 3 Nachrichten pro Benutzer
},
child: Text('test'),
style: ElevatedButton.styleFrom(
primary: Colors.red,
shape: CircleBorder(),
padding: EdgeInsets.all(10),
),
),

//chat send button
Visibility(
visible: _sendButtonVisible,
child: GestureDetector(
onTap: _handleSendPressed,
child: Padding(
padding: // left 9 top 6 right 9 bottom 6
const EdgeInsets.fromLTRB(0, 6, 6, 6),
child: SizedBox(
height: 38.5,
width: 38.5,
child: Container(
decoration: BoxDecoration(
color: Theme.of(context).primaryColor,
borderRadius: const BorderRadius.all(
Radius.circular(100)),
),
child: const Icon(
Icons.send,
color: Colors.white,
size: 20,
),
),
),
),
),
),
],
),
),
),
),
],
),
),
),
),
],
),
);
}

}
