name: CI
on:
  push:
    branches:
      - main
jobs:
  build_ios:
    name: Build Flutter (iOS)
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          echo "---ls"
          ls
          echo "---pwd"

          pwd
          echo "---find"

          find ~/Library/MobileDevice/Provisioning\ Profiles -name "*.plist" -print
          echo "/Users/runner/work/Locoo/Locoo/ios/Runner/"

          cd /Users/runner/work/Locoo/Locoo/ios/Runner/
          echo "l---s"


          ls
          echo "l---s2"
          cd ~/Library/MobileDevice/Provisioning\ Profiles/
          ls
          #search for file ExportOptions.plist
          echo ----find
          find . -name "ExportOptions.plist" -print
         
          


      # Install flutter
      - name: Flutter get
        uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      # Install your project's dependencies
      - run: flutter pub get

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=/Users/runner/work/Locoo/Locoo/ios/Runner/ExportOptions.plist
          
      # Collect the file and upload as artifact         
      - name: collect ipa artifacts
        uses: actions/upload-artifact@master
        with:
         name: release-ipa
         # Path to the release files
         path: build/ios/ipa/*.ipa

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  firebase_app_distribution_ios:
    name: Release ipa to Firebase
    needs: [ build_ios ]
    runs-on: ubuntu-latest
    steps:
    
    # Retrieve ipa file from GitHub artifacts
    - uses: actions/checkout@v2
    - name: Get release-ipa from artifacts
      uses: actions/download-artifact@master
      with:
        name: release-ipa

    # Upload ipa file to Fiebase
    - name: Upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1.3.4
      with:
        appId: ${{secrets.FIREBASE_APP_ID_IOS}}
        token: ${{secrets.FIREBASE_TOKEN}}
        groups: testers
        file: locoo.ipa
    # name: Upload iOS Beta to Firebase App Distribution
    # needs: [build_ios]
    # runs-on: ubuntu-latest
    # steps:
    # - uses: actions/checkout@v1
    # - name: set up JDK 1.8
    #   uses: actions/setup-java@v1
    #   with:
    #     java-version: 1.8
    # - name: Download Artifact
    #   uses: actions/download-artifact@master
    #   with:
    #     name: ios-build
    # - name: Upload IPA
    #   uses: wzieba/Firebase-Distribution-Github-Action@v1.3.4
    #   with:
    #     appId: ${{secrets.FIREBASE_APP_ID_IOS}}
    #     token: ${{secrets.FIREBASE_TOKEN}}
    #     group: testers
    #     file: Runner.ipa

  build_android:
    name: Build Flutter (Android)
    # needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build appbundle
      - run: flutter build apk
      - uses: actions/upload-artifact@main
        with:
          name: apk-release
          path: build/app/outputs/flutter-apk/app-release.apk
      
      - uses: wzieba/Firebase-Distribution-Github-Action@v1.3.4
        with:
          appId: ${{secrets.FIREBASE_APP_ID_ANDROID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: testers
          file: build/app/outputs/flutter-apk/app-release.apk
  # firebase_app_distribution_android:
  #   name: Upload Android Beta to Firebase App Distribution
  #   runs-on: ubuntu-latest
  #   needs: [build_android]
  #   steps:
  #     - uses: wzieba/Firebase-Distribution-Github-Action@v1.3.4
  #       with:
  #         appId: ${{secrets.FIREBASE_APP_ID_ANDROID}}
  #         token: ${{secrets.FIREBASE_TOKEN}}
  #         groups: testers
  #         file: app/build/outputs/apk/release/app-release-unsigned.apk











# name: CI
# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-ios:
#     runs-on: macos-latest
#     defaults:
#       run:
#         working-directory: app

#     steps:
#       - uses: actions/checkout@v2

#       - uses: subosito/flutter-action@v1.5.3

#       - name: Install Dependencies
#         run: flutter packages get

#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.STAGING_BUILD_CERTIFICATE_BASE64 }}
#           P12_PASSWORD: ${{ secrets.STAGING_P12_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.STAGING_BUILD_PROVISION_PROFILE_BASE64 }}
#           KEYCHAIN_PASSWORD: ${{ secrets.STAGING_KEYCHAIN_PASSWORD }}
#         run: |
#           # create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH

#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

#       - name: Build
#         run: flutter build ios --release --no-codesign

#       - name: Build resolve Swift dependencies
#         run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration "Release"

#       - name: Build xArchive
#         run: |
#           xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration "Release-staging" DEVELOPMENT_TEAM=**DEV_TEAM** -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/app.xcarchive PROVISIONING_PROFILE=**PROVISIONING_PROFILE_ID** clean archive CODE_SIGN_IDENTITY="**CODE_SIGNING_IDENTITY**"

#       - name: Export ipa
#         run: |
#           xcodebuild -exportArchive -archivePath build-output/app.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/ExportOptions.plist

#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: App.ipa
#           path: /Users/runner/work/locoo/locoo/app/build-output/ios/locoo.ipa
#           retention-days: 1
#           if-no-files-found: error

#       - name: Clean up keychain and provisioning profile
#         if: ${{ always() }}
#         run: |
#           security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
#           rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision




#   flutter_test:
#     name: Run flutter test and analyze
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-java@v1
#         with:
#           java-version: "12.x"
#       - uses: subosito/flutter-action@v1
#         with:
#           channel: "stable"
#       - run: flutter pub get

  # build_ios:
  #   name: Build Flutter (iOS)
  #   # needs: [flutter_test]
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-java@v1
  #       with:
  #         java-version: "12.x"
  #     - uses: subosito/flutter-action@v1
  #       with:
  #         channel: "stable"
  #     - run: flutter pub get
  #     - run: flutter clean
  #     - run: flutter build ios --release --no-codesign
  # distribute-ios:
  #   needs: build-ios
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: App.ipa

  #     - name: Firebase App Distribution
  #       uses: wzieba/Firebase-Distribution-Github-Action@v1.3.2
  #       with:
  #         appId: ${{secrets.IOS_FIREBASE_APP_ID_STAGING}}
  #         token: ${{secrets.FIREBASE_TOKEN}}
  #         groups: testers
  #         file: locoo.ipa

  