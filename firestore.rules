// firebase deploy --only firestore:rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function available for all collections
    // Checks that request is coming from an authenticated user
    function isSignedIn() {
      return request.auth != null;
    }
    
    //TEMPRÃ„R!!!!!!!!!!!!!!!
    allow read, write: if isSignedIn();
    
    match /posts/{postId} {
      function userExists() {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid));
      }
      allow read: if isSignedIn();
      allow create: if userExists() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.title is string &&
        request.resource.data.title.size() >= 2 &&
        request.resource.data.title.size() <= 256 &&
        request.resource.data.description is string &&
        request.resource.data.description.size() > 1 &&
        request.resource.data.category is string &&
        request.resource.data.likes is number &&
        request.resource.data.likes == 0 &&
        request.resource.data.imageUrl is string &&
        request.resource.data.tags is list &&
        request.resource.data.tags.size() <= 20 &&
        // a tag in tags can only be 64 characters long
        // request.resource.data.tags[0:19].size() <= 64 &&
        request.resource.data.createdAt is timestamp;
      allow update: if resource.data.uid == request.auth.uid &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.title is string &&
        request.resource.data.title.size() >= 1 &&
        request.resource.data.title.size() <= 256 &&
        request.resource.data.description is string &&
        request.resource.data.description.size() > 1 &&
        request.resource.data.category is string &&
        request.resource.data.likes is number &&
        request.resource.data.likes == resource.data.likes &&
        request.resource.data.imageUrl is string &&
        request.resource.data.tags is list &&
        request.resource.data.tags.size() <= 20 &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if resource.data.uid == request.auth.uid;
      //allow everyone to read write to the comments subcollection
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if userExists() &&
          request.resource.data.uid == request.auth.uid &&
          request.resource.data.text is string &&
          request.resource.data.text.size() > 1 &&
          // request.resource.data.text.size() <= 256 &&
          request.resource.data.likes is number &&
          request.resource.data.likes == 0 &&
          request.resource.data.createdAt is timestamp &&
          request.resource.data.post == postId;
        allow update: if resource.data.uid == request.auth.uid &&
          request.resource.data.uid == request.auth.uid &&
          request.resource.data.text is string &&
          request.resource.data.text.size() > 1 &&
          // request.resource.data.text.size() <= 256 &&
          request.resource.data.likes is number &&
          request.resource.data.likes == resource.data.likes &&
          request.resource.data.createdAt is timestamp &&
          request.resource.data.createdAt == resource.data.createdAt &&
          request.resource.data.post == postId;
        allow delete: if resource.data.uid == request.auth.uid;
      }
    }

    match /users/{userId} {
      function isSelf() {
        return request.auth.uid == userId;
      }
      allow read: if isSignedIn();
      allow write: if isSignedIn() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.imageUrl is string &&
        request.resource.data.name is string && 
        request.resource.data.name.size() >= 1 &&
        request.resource.data.suburb == resource.data.suburb;
      match /public/{document=**} {
        //TODO
        allow read: if isSignedIn();
        allow write: if isSignedIn() && isSelf();
      }
      match /private {
        match /codes { 
          allow read: if isSignedIn() &&
            isSelf();
        }
        match /name { 
          allow read, create, update: if isSignedIn() &&
            isSelf() &&
            request.resource.data.firstName is string &&
            request.resource.data.lastName is string &&
            request.resource.data.firstName.size() >= 1 &&
            request.resource.data.lastName.size() >= 1;
        }
        match /settings { 
          allow read, create, update: if isSignedIn() &&
           isSelf() &&
            request.resource.data.lastNameInitialOnly is bool &&
            request.resource.data.permReqBeforeChat is bool;
        }
        match /record/{document=**} {
          //TODO
          allow read, write: if isSignedIn() &&
            isSelf();
        }
        match /address { 
          allow read, create: if isSignedIn() &&
            isSelf() &&
            request.resource.data.street is string &&
            request.resource.data.street.size() >= 1 &&
            request.resource.data.city is string &&
            request.resource.data.city.size() >= 1 &&
            request.resource.data.zip is string &&
            request.resource.data.zip.size() >= 1 &&
            request.resource.data.streetNr is string &&
            request.resource.data.streetNr.size() >= 1;
        }
      }
    }

    match /reports/{reportID} {
      function userExists() {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid));
      }
      allow read: if isSignedIn() &&
        request.resource.data.uid == request.auth.uid;
      allow create: if userExists() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.message is string &&
        request.resource.data.message.size() > 1 &&
        request.resource.data.message.size() <= 1024 &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.category is string;
        // check if the doc field postID exists and if it does, check if the post exists
        // (exists(/databases/$(database)/documents/posts/$(request.resource.data.postID)) ||


    }



    // Rules for the users collection
    // match /users/{userId} {
    //   // Validates user's object format
    //   // Remove this if you don't plan to provide first or last names
    //   function isUserCorrect() {
    //     return isSignedIn() && request.resource.data.firstName is string && request.resource.data.lastName is string;
    //   }

    //   // Checks that the document was created by currently logged in user
    //   function isSelf() {
    //     return request.auth.uid == userId;
    //   }

    //   // Rules set for the users collection
    //   allow create: if isUserCorrect();
    //   allow delete: if isSelf();
    //   allow read: if isSignedIn();
    //   allow update: if isUserCorrect() && isSelf();
    // }

    // Rules for the rooms collection
    match /rooms/{roomId} {
      // Checks that currently logged in user exists in users collection
      function userExists() {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid));
      }

      // Checks that currently logged in user is in the room
      function isUserInRoom() {
        return isSignedIn() && request.auth.uid in resource.data.userIds;
      }

      // Validates room's object format
      function isRoomCorrect() {
        return request.resource.data.type is string && request.resource.data.userIds is list;
      }

      // Rules set for the rooms collection
      allow create: if userExists() && isRoomCorrect();
      allow delete, read, update: if isUserInRoom();

      // Rules for the messages collection
      match /messages/{messageId} {
        // Checks that currently logged in user is in the room
        function isUserInRoomUsingGet() {
          return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.userIds;
        }

        // Validates message's object format
        function isMessageCorrect() {
          return request.resource.data.authorId is string && request.resource.data.createdAt is timestamp;
        }

        // Checks that message's author is currently logged in user
        function isMyMessage() {
          return request.auth.uid == resource.data.authorId;
        }

        // Rules set for the messages collection
        allow create: if isSignedIn() && isMessageCorrect();
        allow delete, read: if isUserInRoomUsingGet();
        allow update: if isUserInRoomUsingGet() && isMyMessage();
      }
    }
    
   
  }
}